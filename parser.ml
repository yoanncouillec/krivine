type token =
  | INT of (int)
  | IDENT of (string)
  | FUN
  | ARROW
  | LET
  | IN
  | ADD
  | SUB
  | LPAREN
  | RPAREN
  | EQUAL
  | EOF

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  259 (* FUN *);
  260 (* ARROW *);
  261 (* LET *);
  262 (* IN *);
  263 (* ADD *);
  264 (* SUB *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* EQUAL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\003\000\003\000\004\000\006\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\004\000\000\000\000\000\000\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\008\000\016\000"

let yysindex = "\255\255\
\051\255\000\000\000\000\000\000\000\255\001\255\051\255\000\000\
\022\000\003\255\250\254\023\255\051\255\051\255\000\000\042\255\
\051\255\051\255\000\000\051\255\051\255\042\255\033\255\051\255\
\042\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\001\000\006\000\011\000\000\000\000\000\
\012\000"

let yygindex = "\000\000\
\000\000\003\000"

let yytablesize = 287
let yytable = "\001\000\
\005\000\010\000\011\000\009\000\018\000\006\000\017\000\000\000\
\009\000\012\000\007\000\008\000\000\000\000\000\000\000\020\000\
\021\000\000\000\000\000\022\000\023\000\015\000\000\000\003\000\
\004\000\005\000\025\000\006\000\000\000\013\000\014\000\007\000\
\019\000\003\000\004\000\005\000\000\000\006\000\024\000\013\000\
\014\000\007\000\003\000\004\000\005\000\000\000\006\000\000\000\
\013\000\014\000\007\000\003\000\004\000\005\000\000\000\006\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\005\000\
\005\000\000\000\005\000\006\000\006\000\006\000\009\000\006\000\
\007\000\008\000\009\000\000\000\007\000\008\000\003\000\004\000\
\005\000\000\000\006\000\000\000\013\000\014\000\007\000"

let yycheck = "\001\000\
\000\000\002\001\002\001\001\000\011\001\000\000\004\001\255\255\
\000\000\007\000\000\000\000\000\255\255\255\255\255\255\013\000\
\014\000\255\255\255\255\017\000\018\000\000\000\255\255\001\001\
\002\001\003\001\024\000\005\001\255\255\007\001\008\001\009\001\
\010\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\001\001\002\001\003\001\255\255\005\001\255\255\
\007\001\008\001\009\001\001\001\002\001\003\001\255\255\005\001\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\007\001\
\008\001\255\255\010\001\006\001\007\001\008\001\006\001\010\001\
\006\001\006\001\010\001\255\255\010\001\010\001\001\001\002\001\
\003\001\255\255\005\001\255\255\007\001\008\001\009\001"

let yynames_const = "\
  FUN\000\
  ARROW\000\
  LET\000\
  IN\000\
  ADD\000\
  SUB\000\
  LPAREN\000\
  RPAREN\000\
  EQUAL\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 11 "parser.mly"
                 ( _1 )
# 170 "parser.ml"
               : Machine.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 14 "parser.mly"
                           ( _2 )
# 177 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 15 "parser.mly"
      ( Machine.Integer (_1) )
# 184 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 16 "parser.mly"
        ( Machine.Var (_1) )
# 191 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 17 "parser.mly"
                            ( Machine.Add (_1, _3) )
# 199 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 18 "parser.mly"
                            ( Machine.Sub (_1, _3) )
# 207 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 19 "parser.mly"
                             ( Machine.Lambda (_2, _4) )
# 215 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 20 "parser.mly"
                                           ( Machine.Let (_2, _4, _6) )
# 224 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 21 "parser.mly"
                        ( Machine.App (_1, _2) )
# 232 "parser.ml"
               : 'expression))
(* Entry start *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let start (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Machine.expression)
